	17-06-2019

	Unix and Shell Scripting : 

		Database 

		SQL and PL SQL -----> 5 
anandu.sreekumar@outlook.com
	

C Language 	


	https://github.com/Kaleakash/greatwestglobal2019.git



	Pro C 

		Java	-----> 5 day 

		jUnit ------->


		Web Service : JAX_RS : 

	HTML/CSS/JavaScript /TypeScript 


	Angular 		React JS 

* Exercises
* Unix Command line
Given a file, say employee.csv, containing data in the following format

empid,initials,department,leave_available        
1000,KK,CTO_OFFICE,12
2001,MA,HEXAVARSIT,8
1001,IK,CTO_OFFICE,9
2002,UM,HEXAVARSIT,7
1002,SK,CTO_OFFICE,13
2003,VR,HEXAVARSIT,6
2004,JK,HEXAVARSIT,6

* Give an unix command which returns the record with the maximum leave_available
* In the above case, the output should be

	1002,SK,CTO_OFFICE,13


* Give an unix command which returns one row per department - department, sum of leave_available of all employees in that department
 * In the above case, the output should be

	CTO_OFFICE,34
	HEXAVARSIT,27



	Shell Scripting :It is use to execute set of statement or commands with or without 
	conditions. 

	Variable : variable is a name which hold the value and value can change during the 
	execution of a program. 

	a=10
	echo The value of a $a

	echo enter the name
	read name
	echo welcome to scripting $name

	
	Command line arguments. 
	
	echo id is $1
	echo name is $2
	echo salary is $3
	echo number of argument are $#
	echo all argument details are $*


	./demo1.sh 100 Raj 12000

	if statements 

	simple if 
	if else 

	while loop 
	for loop 
	until loop 

	


	Database ----> SQL / PL SQL 

	Data 
	Information 
	Database 
	DBMS 
	RDBMS 
		Oracle, MySQL, DB2, SQL Server 2018 etc 

		
	ORDBMS : Object 

			
	Input 			read a,b
		Process 		sum = a+b
	Output 			write sum 

			
	File base system 
		CRUD : Create(Insert), Read(View), Update and Delete 
		
		Id Name Salary PhNumber 
		1 Raj 12000 9900

		emp.txt 

	
	Database system 	
				DBMS 	----> RDBMS 


	Employee ----> Table (Relation)

	Column (Attribute)

	Id	Name	Salary 
	1	Raj	12000	---> Row (Tuple)
	2	Seeta	14000
	3	Veeta	16000 

	DBMS 

	TrainerStudents 

	TId	TName	Tech	SId	SName	Age 
	1	Raj	Java	100	Seeta	24
	1	Raj	Java	101	Reeta	25
	1	Raj	Java	102	Meeta	28
	

	RDBMS
	Trainer 
	PK
	TId	TName	Tech 
	1	Raj	Java

	Student 
	PK			FK
	SId	SName	Age	TSId
	100	Seeta	24	1
	101	Reeta	25	1
	104	Ajay	32	2

	RDBMS

	Company Name 		Product Name 
	Oracle 			Oracle 
	SunMicroSystem(Oracle)	MySQL
	MicroSoft 			SQL Server 2018
	IBM			DB2 

					etc 

	SQL : Structure Query Language 

	5 types 
	1. DRL or DQL (Data Query Language or Data Retrieval Language 
		Select Clause 
	2. DDL (Data Definition Language)
		create, drop, trancate, alter etc 
	3. DML (Data Manipulation Language)
		insert, delete and update 
	4. TCL (Trancational Control Language)
		commit, rollback and savepoint 
	5. DCL (Data Control Language)
		grant and revoke 

	
	select * from tab
		
20-06-2019

	username and password 

	MySQL, Db2 and SQL Server 

	show databases;

	use databasename;
		
	create database mydb;

	use mydb;
	
	show tables;

	
	select * from tab;

	select * from tableName;

	retrieve specific columns 

	select columnName, columnName from tableName;

	select employee_id,first_name,salary from employees;

	column alias 

	select employee_id as emp_id,first_name as emp_name from employees;


	Full_Name,Basic_Salary,HRA,DA,PF,Gross_Salary 

	HRA = 5%salary 
	DA = 10%salary 
	PF = 7%salary 
	Gross_Salary = salary + hra +da - pf 

	100 - Steven King 

	Where Clause 

	1. Relational Operators 

	>
	>=
	<
	<=
	=
	!=	or 	<>
	syntax 
	
	select * from tableName where columnName RO value;

	select * from employees where salary > 10000;

	select * from employees where employee_id=110;

	select first_name from employee where job_id ='IT_PROG';

	select salary from employee where first_name ='Steven';


	2. between operator (filter the range of the value)

	select * from tableName where columName between min_Value and max_Value;


	select * from employees where salary between 5000 and 10000;

		
select first_name,last_name from employees where employee_id between 100 and 120

	3. in operator 

	select * from tableName where columnName in(value1,value2,value3...valuen)

	select first_name from employees where salary in(17000,5000,12000,2800)

	select * from employees where job_id in('IT_PROG','AD_VP','ST_MAN')

	4. like operator 

	select * from tableName where columnName like value;

	
	select * from employee where first_name = 'Steven';

	select * from employee where first_name like 'Steven';

	select * from employee where first_name like 'S%';

	select * from employees where first_name like 'S%';

	select * from employees where first_name like '%a';

	select * from employees where first_name like '%ee%';


	
	5. is null 

		
	Logical Operator 

	and, or, not

	select * from tableName where columnName op value and columnName op value 


	select * from tableName where columnName op value or columnName op value 

	select * from employee where first_name like 'S%' and salary > 14000

	select * from employee where first_name not like 'Steven';

				 
	Sorting : Sorting can done using order by 

	select * from tableName order by columnName asc/desc 

	DDL : Data Definition Language. 

	create : 

	syntax 

	create table tableName(
	columnName dataType1
	columnName dataType2

	columnName dataTypen
	)	

	Emp

	Id		Name		Salary		Dob

	int 		varchar(10)	float 		date 
	number(10)	varchar2(10)	number(10,2)

	

	DML : Data Manipulation Language 

	Insert : 

	insert into tableName(columnName1,columnName2) values(value1,value2);


	Delete 

	delete from tableName;

	delete from emp;

	delete with where clause 

	delete from emp where id =1;
	delete from emp where salary > 15000;
	delete from emp where name like 'Raj';

	
	update query 

	update tableName set columnName = value;

	update emp set salary = 25000;

	update emp set salary = 25000 where id =1;
	update emp set name = 'Raj Deep' where id =1;
	update emp set id =100 where name like 'Seeta'
	update emp set salary = 22000 where id =1 and name like 'R%';
	update emp set salary = 22000 where id =1 or name like 'R%';

	update emp set salary = 18000,name='Ravi Kumar' where id =3;

	DDL : Create, 
	Drop : drop command is use to remove records as well as structure of the 
	tables. 

	syntax 

	drop table tableName;

	alter command : 

		
	
	
21-06-2019

	Join : Join is use to retrieve more than one column from more than one tables 
	with or without conditions. 

	table1 
	SrNo	Name	Salary 
	1	Raj	12000	
	2	Seeta	14000

	table2 

	Accno	Name	Amount 
	100	Raj	500
	101	Raju	1000

	select column1,column2....columnn from table1,table2;

	
	first_name,salary, department_name, city 

	Employees ----> first_name, salary 
			

	Departments----> department_name 

	Locations -----> City  


	Self join : 

	joining the same tables itself is known as self join. 
	


	SQL Function : 

	function : set of instruction to peform a specific task. 

	2 types 
	


	1. Pre-defined function or built in function 
		
		1. single row functions 
			string functions 
			number functions 
			maths functions 
			date functions 
			convertion function 
						etc 
		2. Multiple row funtions 
		

	sum, avg, max, min and count etc 


	Group by clause 

		












	
	2. User-Defined function -- PL SQL 
	

	

	Display Employee_name, NumberOfYearOfExp

	

	Display Employee_name, NumberOfYearOfExp > 30 years 

	24-06-2019 

	Table ---->

Id,Name,Salary,Age,AccnoNumber, Phnumber, City,State,PinCode, ProjectId,ProjectName etc 

1  Raj 12000, 21, 1, 9900 
2  Raj 12000, 21, , 9911
	Id		PK
	Accno		Unique key 
	PhNumber 	Unique key 
	ProjectId		Unique Key 
		
	Id,Accno
	Id,Phnumber
	Id,ProjectId
	Id,Name
	Id,Name,Salary 	
	Id,Name,Salary,Age 
	
	Id,Name,Salary

	Id,Name

	Id
	
	

		      PK
	CompanyId	ProductId		Price 

	A		X		100
	B		X		200
	A		Y		300
	B		Y		400
	A		X		500

	


	Constraints : Constraints is use to restrict the user or programmer to store the 
	invalid data. 

	1. not null 
	2. unique 
	3. default 
	4. check 
	5. primary key 
	
	6. foreign key 
	
	Table --->EmployeeInfo 

Pk	not null	check 	check 		Default 
			>21	25000 and 50000	GreatWestGlobal	Unique
 
Id 	Name	Age	Salary	                                    Company        PhNumber   


	

	Database Relationship 

	4 types 

	1. one - to - one 		Person --->Passport 
	2. one - to - many 		Trainer ----> Student 
	3. many - to - one 		Employee ----> Departments 
	4. many - to - many 		Students -----> SkillSets (Technologies)



	Students 
	PK		FK
	S	SName	SS_S

	SkillSets 
	PK		FK
	SS	Name 	S_SS
	

	Trainer 
	PK
	TId	TName	Tech 
	1	Raj	Java
	2	Ram	net 

	Student 
	PK			FK
	SId	SName	Age	TSId
	100	Seeta	21	1
	101	Reeta	22	1
	102	Meeta	23	2
	103	Veeta	24	2
	104	Teeta	25	null
	
	
	Column level Constraints

create table trainer(tid int primary key, tname varchar(10) not null, tech varchar(10) not null)

create table student(sid int primary key,sname varchar(10) not null, age int, tsid int references trainer(tid));

	Table level constraints 

create table trainer(tid int, tname varchar(10) not null, tech varchar(10) not null, 
constraints t_pk primary key(tid))

create table student(sid int, sname varchar(10), age int, tsid int, 
constraint std_pk primary key(sid), 
constraints ts_fk foreign key(tsid) references trainer(tid));

	Adding the Constraings using alter commands. 

create table trainer(tid int, tname varchar(10) not null, tech varchar(10) not null);

alter table trainer add constraints t_pk primary key(tid)


create table student(sid int, sname varchar(10), age int, tsid int);

alter table student add constraint std_pk primary key(sid);

alter table student add constraints ts_fk foreign key(tsid) references trainer(tid)


	Sequence : 

	Sequence is a pre-defined oracle object which help to create the auto increment 	number. 		

	syntax 

	create sequence sequencename;

	sequencename.nextval;

	sequencename.currval;

	create sequence sequencename start with 100 

	create sequence sequencename start with 100 increment by 2;

		
	View : View is a oracle pre-defined object which help to create the virtual tables
	on base table. 

	syntax 

	create view view_name 
	as select query 

	

		


1. create view employeeInfo_view1 
as
select * from employeeInfo;

2. create view employeeInfo_view4
as
select * from employeeInfo where salary > 35000 

3. create view employeeInfo_view3
as
select * from employeeInfo where salary > 35000 with check option 

4. create view employeeInfo_view5
as
select * from employeeInfo with read only 

5. create view emp_dept_view 
as 
select emp.first_name,emp.salary,dept.department_name from employees emp, departments dept where 
emp.department_id = dept.department_id;




	Sub Query : 

	Query within another query is known as Sub Query 
	

	Syntax 

	Outer Query (Inner Query)

	Outer Query (Inner Query (Inner Inner Query ))

	select avg(salary) from employees;

	select first_name from employees where salary > 
	
	select first_name,avg(salary) from employees;

	
	Types of sub query 

	Single Row Sub Query 


	Outer Query 	RO	(Inner Query )

	Multiple Row Sub Query 


	Outer Query 	In 	(Inner Query )
			RO any 
			RO all 

	
	
	select first_name from employees where salary > (select avg(salary) from employes)


select job_id from employees where department_id=80
	

select first_name from employees where job_id ='SA_MAN' or job_id = 'SA_REP'


select first_name from employees where job_id in ('SA_MAN','SA_REP')

using sub query 

select first_name from employees where job_id in (select job_id from employees where department_id=80)






	commit;

	
	PL SQL : 

	
	Procedure Language or Programming Langauge on SQL. 

	PL SQL is a extension of SQL. 
	PL SQL Provide programming features for SQL Query. 

	Pl SQL Blocks 

	1. Anonymous Block 
	2. Named Block 
		a. Procedure 
		b. function 
		c. trigger 

	Block syntax 

	
	declare 		Optional 

	begin 
			SQL and Non SQL Statements; 	
	
	exception 		Optional 

	end;

	1. 

	begin 
		dbms_output.put_line('Welcome to Pl SQL Statements');
	end;


	2. 

	
	begin 
		insert into employeeInfo values(6,'Dinesh',24,35000,'Dell',991234);
		delete from employeeInfo where empId =1;
		update employeeInfo set salary = 15000 where empId=2;
		dbms_output.put_line('Welcome to Pl SQL Statements');
	end;
	
	select * from tableName;

	PL SQL Variables : 
	variable is name which hold the value. 

	types of variables. 
	1. Scalar variables : It is use to store only one value. 
		
		variable declaration syntax 

		variableName dataType;




	2. Composite variables : It is use to store more than one value. 

	
	Syntax for Select clause in PL SQL


	select columnName1, columnName2..... into 
	variableName1, variableName2 from tableName where clause  (Primary key values)

set serverouptut on;
declare 
v_name varchar2(20);
v_salary number(10,2);
v_deptName varchar2(20);
v_city varchar2(15);
begin 
select e.first_name,e.salary,d.department_Name,l.city 
into v_name,v_salary,v_deptName,v_city from employees e, departments d, locations l 
where employee_id=&empId and e.department_id=d.department_id and d.location_id=l.location_id;
dbms_output.put_line('Name is '||v_name);
dbms_output.put_line('Salary is '||v_salary);
dbms_output.put_line('Department Name is '||v_deptName);
dbms_output.put_line('City Name is '||v_city);
end;

	variable anchor : 

It is use to copy the column data types as well as size of the data types in variable name. 

	Syntax 

	variableName tableName.columnName%type;

	v_name employees.first_name%type;

set serverouptut on;
declare 
v_name employees.first_name%type;
v_salary employees.salary%type;
v_deptName departments.department_name%type;
v_city locations.city%type;
begin 
select e.first_name,e.salary,d.department_Name,l.city 
into v_name,v_salary,v_deptName,v_city from employees e, departments d, locations l 
where employee_id=&empId and e.department_id=d.department_id and d.location_id=l.location_id;
dbms_output.put_line('Name is '||v_name);
dbms_output.put_line('Salary is '||v_salary);
dbms_output.put_line('Department Name is '||v_deptName);
dbms_output.put_line('City Name is '||v_city);
end;	


	if statements 

1. simple if 

set serveroutput on;
declare 
a number(2):=10;
b number(2):=5;
begin 
if a > b then 
dbms_output.put_line('A is largest');
end if;
dbms_output.put_line('Finish');
end;



2 if else 

set serveroutput on;
declare 
a number(2):=10;
b number(2):=50;
begin 
if a > b then 
dbms_output.put_line('A is largest');
else 
dbms_output.put_line('B is largest');
end if;
dbms_output.put_line('Finish');
end;


3. if else if 

set serveroutput on;
declare 
m1 number(10):=80;
m2 number(10):=67;
m3 number(10):=88;
average number(10,4);
begin 
average :=(m1+m2+m3)/3;
if average > 90 then 
dbms_output.put_line('A++');
elsif average > 75 then  
dbms_output.put_line('A ');
elsif average > 60 then 
dbms_output.put_line('B');
else 
dbms_output.put_line('C');
end if;
dbms_output.put_line('Finish');
end;


set serveroutput on;
declare 
v_id employees.employee_id%type:=&empId;
v_salary employees.salary%type;
begin 
select salary into v_salary from employees where employee_id= v_id;
if v_salary > 15000 then 
    update employees set salary = salary  + 2000 where employee_id = v_id;
    dbms_output.put_line('Salary updated as 2000');
else 
  update employees set salary = salary  + 5000 where employee_id = v_id;
  dbms_output.put_line('Salary updated as 5000');
end if;
end;

	looping : 

	while loop 
	exit loop (do while loop)
	for loop 


set serveroutput on
declare 
i number(4):=1;
n number(4):=10;
begin 
 while i < n
    loop
        dbms_output.put_line(i);
        i:=i+1;
  end loop;
end;	

set serveroutput on
declare 
i number(4):=1;
n number(4):=10;
begin 
    loop
        dbms_output.put_line(i);
        i:=i+1;
        exit when i > n;
  end loop;
end;	




set serveroutput on
begin 
  for i in 1..10
    loop
        dbms_output.put_line(i);
  end loop;
end;	


set serveroutput on
begin 
  for i in reverse 1..10
    loop
        dbms_output.put_line(i);
  end loop;
end;	


Increase the salary of all employee: If experience is more than 30 years, increase salary by 20% If experience is greater than 20 years, increase salary by 10% Otherwise 5% if else if by Expression:

Composite Data types 

Records : Records is composite data types which is use to store more than one value of different 
data types or scalar types. 

syntax 

type record_type_name is record 
(
variableName1 dataType1,
variableName2 dataType2

variableNamen dataTypen
);


set serveroutput on;
declare 
v_name varchar2(10);
type emp_type_rec is record 
(
r_id number(10),
r_name varchar2(10),
r_salary number(10,2),
r_hiredate date
);
emp_rec emp_type_rec;
begin 
dbms_output.put_line('Record example');
select employee_id,first_name,salary,hire_date into emp_rec.r_id,emp_rec.r_name,emp_rec.r_salary,emp_rec.r_hiredate from employees 
where employee_id=100;
dbms_output.put_line('Id is '||emp_rec.r_id||'Name is '||emp_rec.r_name||'Salary is '||emp_rec.r_salary||'Hire date is '||emp_rec.r_hiredate);
end;


Records with variable anchor 


set serveroutput on;
declare 
v_name varchar2(10);
type emp_type_rec is record 
(
r_id employees.employee_id%type,
r_name employees.first_name%type,
r_salary employees.salary%type,
r_hiredate employees.hire_date%type
);
emp_rec emp_type_rec;
begin 
dbms_output.put_line('Record example');
select employee_id,first_name,salary,hire_date into emp_rec.r_id,emp_rec.r_name,emp_rec.r_salary,emp_rec.r_hiredate from employees 
where employee_id=100;
dbms_output.put_line('Id is '||emp_rec.r_id||'Name is '||emp_rec.r_name||'Salary is '||emp_rec.r_salary||'Hire date is '||emp_rec.r_hiredate);
end;


	Records with RowType attribute 

	recordVariableName tableName%rowtype;

	
	emp_rec employees%rowtype;

		


set serveroutput on;
declare 
emp_rec employees%rowtype;
begin 
dbms_output.put_line('Record example');
select employee_id,first_name,salary,hire_date into emp_rec.employee_id,
emp_rec.first_name,emp_rec.salary,emp_rec.hire_date from employees 
where employee_id=100;
dbms_output.put_line('Id is '||emp_rec.employee_id||'Name is '||emp_rec.first_name
||'Salary is '||emp_rec.salary||'Hire date is '||emp_rec.hire_date);
end;


	26-06-2019

	
	Types of block 

	1. Anonymous Block 

	
	2. Pl SQL Named block 

	a. Stored Procedure or Procedure 

create procedure procedureName(variableName1 mode dataType1, variableName2 mode dataType2)
as 
begin 
	set of statmenets (SQL or Non SQL)

end procedureName; 


	Procedure parameter mode : 

	a. in mode 	: read (or) receive the value 	
	b. out mode : out (or) return the value or write 
	c. in out mode:  int out (or) receive and return the value or read and write 

create or replace procedure addNumber(n1 in number, n2 number) 
as 
result number(10);
begin 
result  := n1+n2;
dbms_output.put_line('Sum of two number is '||result);
end addNumber;

set serveroutput on;
declare 
a number(3):=100;
b number(3):=200;
begin 
addNumber(a,b);
end;

		


create or replace procedure addNumber(n1 in number, n2 in number, result out number) 
as 
begin 
result  := n1+n2;
end addNumber;

set serveroutput on;
declare 
a number(5):=100;
b number(5):=200;
resultInfo number(10);
begin 
addNumber(a,b,resultInfo);
dbms_output.put_line(resultInfo);
end;

create or replace procedure updateSalary(salary in out number) 
as 
begin 
salary := salary+5000;
end updateSalary;




set serveroutput on;
declare 
sal number(10):=10000;
begin
dbms_output.put_line('Salary before calling procedure is '||sal);
updateSalary(sal);
dbms_output.put_line('Salary after calling procedure is '||sal);
end;






	b. function : function is named block which can receive more than one parameter using 
	in mode but mandatory return one output using return keyword. 

	create or replace function functionName(variableName mode dataType)
	return dataType
	as 
	begin 



	return value;
	end functionName;



create or replace function myFunction
return varchar 
as 
begin 

return 'Welcome';
end myFunction;

set serveroutput on;
declare 
msg varchar(30);
begin 
msg := myFunction();
dbms_output.put_line(msg);
end;


select myFuntion() from dual;




create or replace function deptDetails(empId in number)
return varchar2 
as 
dept_name varchar(20);
begin 
select d.department_name into dept_name from employees e, departments d where 
e.department_id = d.department_id and e.employee_id = empId;
return dept_name;
end deptDetails;



select deptDetails(employee_id) from employees;

	

	Trigger :   Trigger is a type of special stored procedure which will execute or fire automatically 
	when we execute the DML Operation on table. 

	DML
	

			Before 			After 
	Insert
	
	Delete 
	
	Update 
	
	syntax 

	create or replace trigger triggerName 
	before/after Insert/Delete/Update on 
	tableName 
	for each row 
	begin 
			set of task. 
	
	end triggerName;







create table employee(id int primary key,name varchar(10), salary float);


create table employee_track(trackId int primary key,dateTimeInfo date)


create sequence emp_seq_track


create or replace trigger emp_trigger 
after insert 
on employee 
for each row 
begin 
insert into employee_track values(emp_seq_track.nextval,sysdate);
end emp_trigger;





	product 

	pid	pname	price 

	
	product_history 

	ph_id 	pname	oldprice	newprice	updatedDate


	
	
	cursor : cursor is a temporary memory area created by oracle server when we execute 
	SQL query within PL SQL block(anonymous or named block(procedure or functions)). 

	Types of cursor 

	1. Implicit 
		
		sql%cursorName;

		sql%found
		sql%notfound 
		sql%rowcount
		sql%isopen 

				etc 

	2. Explicit 

		
	syntax 

	cursor cursorName is select clause 

set serveroutput on;
declare 
cursor emp_cur is select first_name from employees;
v_name varchar(15);
begin 
dbms_output.put_line('Cursor Example');
open emp_cur;
fetch emp_cur into v_name;
dbms_output.put_line('Employee Name is '||v_name);
fetch emp_cur into v_name;
dbms_output.put_line('Employee Name is '||v_name);
close emp_cur;
end;


			Exception Handling : 

		Exception is a type of error which will generate when unexpected or abnormal
		condition during the execution of a program. 

		syntax 

	
		declare 

		begin 


		exception 
			when exception_name then 

			when exception _name then 

			when others then 
			

		end;	


		Pl SQL 

		1. Name of the Exception 
		2. Error code 
		3. Exception message. 
		
		Types of Exception 

		1. Pre-Defined name and pre-defined error code. 		
		2. Non-Pre-defined name and pre-defined error code 
		3. Non-Pre-defined name and NO Error code 
		(-20000 to -29999) 


set serveroutput on;
declare 
a number(4):=10;
b number(4):=1;
res number(5,2);
v_name varchar(15);
begin 
res := a/b;
dbms_output.put_line('REsult is '||res);
select first_name into v_name from employees where employee_id=1000;
exception 
when no_data_found then 
dbms_output.put_line(' Record is not present');
when zero_divide then 
dbms_output.put_line(' Zero Divided Exception');
when too_many_rows then 
dbms_output.put_line('More than one record retrieve the select query');
when others then 
dbms_output.put_line('Exception Generated');
end;


set serveroutput on;
declare 
a number(4):=10;
b number(4):=1;
res number(5,2);
v_name varchar(15);
duplicate_rec_exception exception;
pragma exception_init(duplicate_rec_exception,-1);    --Register the exception with Error code -1
begin 
res := a/b;
dbms_output.put_line('REsult is '||res);
select first_name into v_name from employees where employee_id=100;
insert into product values(1,'Mobile',16000);
exception 
when no_data_found then 
dbms_output.put_line(' Record is not present');
when zero_divide then 
dbms_output.put_line(' Zero Divided Exception');
when too_many_rows then 
dbms_output.put_line('More than one record retrieve the select query');
when duplicate_rec_exception then 
dbms_output.put_line('Duplicate Record Exception Generate');
when others then 
dbms_output.put_line('Exception Generated');
end;




set serveroutput on;
declare 
a number(4):=10;
b number(4):=1;
res number(5,2);
v_name varchar(15);
duplicate_rec_exception exception;
pragma exception_init(duplicate_rec_exception,-1);    --Register the exception with Error code -1
begin 
res := a/b;
dbms_output.put_line('REsult is '||res);
select first_name into v_name from employees where employee_id=100;
insert into product values(6,'Mobile',16000);
	insert into student values(6,'Seeta',34,6);
exception 
when no_data_found then 
dbms_output.put_line(' Record is not present');
when zero_divide then 
dbms_output.put_line(' Zero Divided Exception');
when too_many_rows then 
dbms_output.put_line('More than one record retrieve the select query');
when duplicate_rec_exception then 
dbms_output.put_line('Duplicate Record Exception Generate');
when others then 
dbms_output.put_line('Exception Generated '||sqlcode);
end;




set serveroutput on;
declare 
a number(10):=10;
b number(10):=5;
myException exception;
pragma exception_init(myException,-20001);
begin 
if a > b then 
raise myException;
end if;
exception 
when myException then 
dbms_output.put_line('User-Defined exception generated'||sqlcode);
end;






















		package 

		TCL 

		DCL

		C Programming Language 

		C is a basic structure programming language which help to develop 
		generic as well as specific application. 

		1972 
		
			
		Pre-Processing Instruction 

		Global variable declaration 

		user-defined functions 

		main function 
			local variable declaration 

			set of statements 


		
		#include<stdio.h>

		


		returnType functionName(parameterList) {

			set of statements;

		}	
		
		void main() {
			printf("Welcome to C Programming Language");
		}

		

		path/gcc	Demo.c 

		


	Variables : Variable is a name which hold the value. 
		
	Data Types : Data type is type of data which tells that type of data it can hold. 

	basic data types. 

	1. int 
	2. float 
	3. char 
	4. double 

	syntax 
	
	dataType variableName;

	dataType varaibleName = value;

	#include<stdio.h>
int main() {
	int a;
	int b=10;
	float c = 10.10;
	char d = 'a';
	double e = 10.2020;
	short int f = 10;
	long int g = 20;
	printf("The value of a = %d\n",a);
	printf("The value of b = %d\n",b);
	printf("The value of c = %f\n",c);
	printf("The value of d = %c\n",d);
	printf("The value of e = %lf\n",e);
	printf("Size of a variable is = %d\n",sizeof(a));
	printf("Welcome to C Programming Language");

	return 0;
}

	Operators :

	Arithmetic Operator : +, -, *, /, %

		Logical Operator : &&, || and ! 

	Conditional operators : 
	>
	<
	>=
	<=
	==
	!=
	increment and decrement operator : ++, --

	bitwise operator : &, ! etc 

	assignement operator : =

	if statements 

	1. simple if 
		if(condition) {

		}
	2. if else 
		if(condition) {

		}else {

		}
	3. nested if 
		if(condition) {
			if(condition){

			}else {

			}
		}else {
		
		}
	4. if else if 

	5. switch statement 


	syntax 

	switch(variableName) {		variableName ---> int or char 
	
	case labelValue1:block1;
		break;
	case labelValue2:block2;
		break;
	case labelValue3:block3;
		break;
	case labelValue4:block4;
		break;
	default : defaultBlock;
		break;
	}


	array : array is a use-defined data types which help to store more than one value of same data 
	types. 

	syntax 

	dataType arrayName[size];

	int abc[10];
	
	int abc1[10]={1,2,3,4,5,6,7,8,9,10};

	float xyz[5];
	float xyz1[5]={10.12,23.56,34.23,56.78,89.56};

	char name[10];
	char name1[5]={'a','b','c','d','e'};
	char name2[10]={"Raj Deep"};

		
	

	if
	if else 
	switch 
	looping 
	
	
	do {
		1: English, 2: GK, 3:Math , 4:Exit 

		switch() {

		1:	English 


		2:	GK

		3:	Math 
	
		4:	Exit 

		}

		do you want to continue. 

	}while()		
	
	C functions 

	Set of instruction to perform a specific task. 

	syntax 
	
	returnType functionName(parameterList) {


	}

	1. no passing parameter no return type. 
	2. passing parameter but not return type. 
	3. passing parameter and return type. 
	4. no passing parameter but return type. 

	
	Create integer array variable and take the value through keyboards, 
	write two funtion sumOfEven and sumOfOdd number and pass the array as a parameter 
	to both function and display the result in main functions. 

	
	String :  Combination of more than one character is known as string. 

	or 

	character array is known as string. 

	in C Language by default every string end with null character.(\0)

	char name;

	char name[size];

	#include<stdio.h>
void main() {
	char name[10]={"Ravi Kumar"};
	char fname[15];
	char stdNames[10][7];
	int i;
	printf("The name is %s\n",name);
	//printf("Enter the name\n");
	//scanf("%s",&fname);
	//printf("First name is = %s\n",fname);
	printf("Enter ther name one by one\n");
	for(i=0;i<5;i++) {
		scanf("%s",&stdNames[i]);
	}
	printf("\nThe names are \n");
	for(i=0;i<5;i++) {
		printf("%s\n",stdNames[i]);
	}
}

	gets(variableName);

	
	
	Structure : structure is a user-defined data types which is use to store more than 
	one value of different data types. 

	syntax 

	struct structureName 
	{
		dataType variableName;
		dataType variableName;	// structure members 
	};
	

	struct Abc {
		int a;
		float b;
		char c;
	}q;


	void main() {
	struct Abc p;		// structure variable 
		printf("%d\n",p.a);	//structureVariableName.structureMemberName;
		printf("%d\n",q.a);
	}


	Create the Student structure which contains RollNumber, SName, Marks(array variable) as 
	as Structure members. then create the structure array variable which help to take 
	more than one Student information through keywords(min 3 students information). 
	then find the avg of marks if avg > 90 grade must be A+, avg > 75 grade A , avg > 60 grade B else 
	C 

	Display All Student details in Console 

	LIke 

	RollNumber  : 
	SName 	    :
	Grade 	    :




	Pointer in C Language :

	Pointer is normal variable which help to store the address of another variables. 

	

	int a;		one box. 

	int a = 10;

		printf("The value of a = %d\n",a);
		printf("The address of a variable is = %d\n",&a);
		printf("Enter the value of a \n");
		scanf("%d",&a);
		printf("The address of a varaible is = %d\n",&a);
				
	pointer varible syntax 

	dataType *variableName;

	int *ptr;

	
	void pointer : void pointer is a type of pointer which is use to store the address of any data type.

	void *pointerVariableName;

	pointer array : 

	

	Dynamic memory allocation : 

	int a;

	int b=20;

	int abc[10];

	malloc 
	calloc
	realloc 	
		It is use to create the dynamic memory at the run time using the pointer. 

	free():	

	
	Pro *C : 

	Pro *C : It is embedded SQL Programming Language provided by Oracle which help to connect 
	the Oracle Database(RDBMS). Pro *C use C or C++ host language to connect the database. 
	Pro *C procompiler interpreters all embedded SQL statements into C or C++ library 
	functions. 

	

	Create Employee 

	id,name,salary 

	where id is primary key 

	
	TCL : Trancational Control Language 

	commit
	rollback;
	savepoint 

	DML (Insert /Delete / Update)


	
	1 query 
	2 query 
	3 query 



	Retrive more than one records from a tables. 
	Create the Banking Application Using Pro *C and SQL/PLSQL 
	
	Oracle Database :

	AccountDetails 	AccNumber(PK), Name, Amount, UserName, Password etc  

	Pro * C 
		1: Login 
				After Login Successfully 
				
					Home Page 
				Account Holder Name, Date and Time etc 
				1: Check Balance 
				2: Withdraw the amount		Maintain min 500 
				3. Deposite the amount 
								It can deposite max 49,999 at a time 
				4. Transfer the amount 
						Use Store Procedure /Function to Transfer the amount 		
		2: Account Create 	AccNo(Auto_Increment), Name, Amount > 500 (Can't create if <500).
							
			C
			void mno() {

			}			
			void xyz() {
				mno();
			}
			void abc() {
				xyz();
			}

			void main() {
				abc();
				abc();					
			}			

			OOPs 

			Object Oriented Programming system 

			object : Any real world entity 
				
				properties (state)   --- have --- variables/fields 
			Person 
				behaviour 	---- do/does -----functions / methods 
			Place
			Bank
			Animal 
			Car 

				etc 
			class :	class is blue print of object or template of object. 

			C++	:  C with classes 


				C++ = C+OOPs 	
				PIAE
				


Java Technologies 					.net 

Java is a platform independent and pure object oriented programming language. 

	Sun Micro System 
	Oracle 

	Version of Java 
		1.0, 1.1,1.2, 1.4, 1.5, 1.6, 1.7
		1.8, 9, 10, 11.x 
				Java 


Java SE				JavaEE				Java ME

JSE				JEE				JME

Java Standard			Java Enterprise  			Java Micro 
Edition 				Edition 				Edition 
		
Core Java 

Basic Java Programming 		Servlet 
OOPS 				JSP (Java Server Pages)
class, object, Encapsuation, 		EJB (Enterprise Java Bean)
Inheritance, Abstraction, 
Polymorphism, 			Spring Framework 
Interface, static, final etc 
Exception Handling 
package 
user-defined package 
pre-defined package 
lang, util, sql etc 
				JAX_RS (Java API for XML RestFull Web Service)


			EJB Vs Spring Framework 

			20%	Vs 	80%

			Spring core 
			Spring MVC
			Spring Rest 
			Spring boot 
					etc 


		
	class syntax 

	struct structureName{
		dataType variableName;		
		dataType variableName;
	};

	class className {
		dataType variableName;
		dataType variableName;
		method declaration;
		method declaration;
	}

	Compile the program 
		
	javac className.java 

	Run the program 

	java className 

		
	data types 

	2 types 



	primitive types : It is use to store only values. 
	8 types 
			without decimal point 
	byte 		1 byte 		
	short 		2 byte 
	int 		4 byte 
	long 		8 byte 
			with decimal point 
	float 		4 byte 
	double		8 byte 
			single character 
	char 		2 byte 
			boolean value may be true or false. 
	boolean 		1 bit 

	non primitive types or reference types : it is use to store the value as well as reference of 
	another data types. 	
	array 
	classes (pre-defined or user-defined)
	interfaces (pre-defined or user-defined)
	enum (pre-defined or user-defined)

	
	Type casting : Converting one data type to another data 
	2 types 
	1. implicit type casting 
	2. Explicit type casting 


	---------> implicit --------------------->

	byte 	short	int 	long 

	<---------Explicit -----------------------


	Operator 

	If statement 

	If else 

	nested if 
		
	switch 

	looping 

		while loop 
		do while loop 
		for loop 

	for each loop or enhanced loop 

	array : 

	syntax 

	dataType arrayName[];

	int abc[];
		
	int abc[]={10,20,30,40,50};

	for(dataType variableName:arrayName){

	}

	Creating the memory size to the array 

	syntax 

	dataType []arrayName = new dataType[size];


	int []abc = new int[10];		in Java 

	int abc[10];			in C/C++


	Taking the value through keyboards 

	1. Scanner class 
	2. DataInputStream 
	3. BufferedReader 
	4. Command line arguments 

	Scanner : Scanner is a pre-defined class part of util package. Which provide set of methods 
	which help to scan the value through keyboards. 

	package : It is a collection of classes and interfaces. 

	create the Scanner class object 

	syntax 

	Scanner obj = new Scanner(System.in);


	Take more than one employeeId, employeeName,employeeSalary, employeeDesg 

	Scanner obj = new Scanner(System.in);
	int n = obj.nextInt();
	int empId[]=new int[n];
	

	if employeeDesg is Manager 

	increment salary by 5000

	if employeeDesg is Developer 	

	increment by 2000

	else 

	500			string compare 
		
				name.equals("Raj")
				name.equalsIgnoreCase("raj");

	05-07-2019

			
	Java with OOPs Concepts. 

	object : object is any real world entity. 
		 
	class   : class is blueprint of object or template of objects. 

	car object 

	Types of variables. 

	1. instance variable
		a. The variable which declare inside a class but outside a method 
		including main method also is known as instance variable. 		
		b. Instance variable we can use directly in all method within a same class 
		but method must be non static. 
		c. instance varible hold default value according to their data types. 
		int family --0
		float family -0.0
		char --- space 
		boolean -- false 
		String -- null
	2. local variable 
		a. The variable which declare inside a method including main method is known 
		as local variable. 
		b. Scope of the varible within that method where it declare.
		c. Local variable doesn't hold default value we have to initialize. 

	3. static variable


	Create two classes 

	Employee 
			id,name,salary ---->intance variable 
			Scanner  class object 
			read() 
			
			calSalary() 
				hra, da and pf local variable 
				hra = 10%salary 
				da = 5%salary 
				pf = 7%salary 
			display() 
				id,name,salary(grossSalary)
	EmployeeTest 
		Main method 
			Create employee class object 
			using object call read method 
			then calSalary 
			then display 
			

	Constructor :
		Constructor is a special method which help to create the object. 

		Pts 
		1. Constructor have same name as the class itself. 
		2. Constructor doesn't contains return type. 
		3. Constructor no need to call it will get call automatically when we create the 
	object of the class. 

		class Employee {
	int id;
	void display() {
		System.out.println(id);
	}
}
class EmployeeTest {
	public static void main(String args[]) {
	Employee emp1, emp2, emp3;
	new Employee();
	new Employee().display();
	//new Employee().display().display();
	emp1 = new Employee();
	emp2 = new Employee();
	emp1.id = 100;
	emp2.id = 200;
	emp1.display();	emp2.display();	//emp3.display();
	emp3 = emp1;
	emp1.display();	emp2.display();	emp3.display();
	emp1.id = 300;	emp2.id = 400;	emp3.id=500;
	emp1.display();	emp2.display();	emp3.display();
	emp2 = null;
	emp1.display();	emp3.display();	//emp2.display();	
	emp1 = null;
	emp3.display();	//emp1.display();	emp2.display();	
	}
}




class Cal {
	int a,b,sum;
	Cal() {
		a= 10;
		b = 20;
	}
	Cal(int a, int b) {
		a= a;
		this.b= b;	
	}
	void setValue(int a, int b) {
		this.a= a;
		this.b = b;	
	}
	void add() {
		sum = a+b;
	}
	void display() {
		System.out.println("Sum is "+sum);
	}
}
class EmployeeTest {
	public static void main(String args[]) {
	Cal c1 = new Cal();		c1.add();		c1.display();	
	Cal c2 = new Cal();		c2.add();		c2.display();	
	Cal c3= new Cal(1,2);		c3.add();		c3.display();
	Cal c4= new Cal(3,4);		c4.add();		c4.display();
	Cal c5 = new Cal();		c5.setValue(5,10);	c5.setValue(20,30);	c5.add();		c5.display();	
	}
}


	

Encapsulation : Wrapping and binding data(variables/fields) and code(functions/methods) in a single unit is known as Encapsulation. 
	Ex : class 

	class Employee {
		String name;
		float salary;
		void display() {

		}
	}



	
	

	JavaBean class :

	Normal class Vs JavaBean class 


	class Employee {
		int id;
		String name;
		float salary;
	}

	public class Employee {
		private int id;
		private String name;
		private float salary;
		//setter and getter methods
		public void setId(int id){
			this.id = id;
		}
		public int getId() {
			return id;
		}
		public void setName(String name){
			this.name = name;
		}
		public String getName() {
			return name;
		}
	}

	

	Inheritance : 

	Inheritance is use to acquire or inherits the properties and behaviour of old class to new class. 

	class OldClass {			super class, base class, parent class 
		properties 
		behaviour 
	}

	class NewClass extends OldClass{	sub class, derived class, child class. 
		properties 	
		behaviour 
	}

Types of inheritance 

1. Single inheritance 
class A {}
class B extends A {}
2. Multilevel inheritance 
class A {}
class B extends A {}
class C extends B {}
class D extends C {}
3. Hierarchical Inheritance 
class A {}
class B extends A{}
class C extends A {}

4. Multiple inheritance 
class A {}
class B {}
class C extends A,B {}			Java doesn't support multiple Inheritance it support 
			indirectly through interface. 



	
		OOPs Relationship 

		1.  Manager/Programmer is a Employee
		2. has a 

		class Employee{
			id
			name
			salary 
			Scanner 
			Address add = new Address();
			read()
				id,name,salary
			calSalary()
			display();
		}
		class Programmer  extends Employee{
			projectName;
			readPrg()
				projectName;
				add.readAdd();
			disPrg();
		}
		class Manager extends Employee{
			numberOfEmp;
			readMgr();
			disMgr();
		}
		class Address {
			city
			state 
			Scanner obj =new Scanner();
			readAdd()
				
			disAdd();
		}

	
		array object :

		Programmer pr = new Programmer();

		int n = obj.nextInt();
		Programmer pr[]=new Programmer[n];

		for(int i=0;i<n;i++){
			pr[i]= new Programmer();
		pr[i].read();
		pr[i].readPgr();
		pr[i].calSalary();
		pr[i].dis();
		}

	
		Manager mgr = new Manager();

				
		





	08-07-2019

	Polymorphism : One name many forms or one name many implementation. 

	two types of polymorphism 

	1. compile time or static binding or early binding 

		Ex : Method Overloading 
		The method have same name but different parameter list(number of parameter list,
		type of parameter list) must be different. 

	class Operation {

		void area(int r) {

		}
		void area(int a, int b) {

		}
		void area(float x, float y) {

		}
	}

	

	2. run time or late binding or dynamic binding 

		Ex : Method Overriding : 	

		The method have same name and same method signature(number of 
	parameter list, type of parameter list as well as return type must be same). 

	
	Annotation : meta - data (data about data). 

	By provided lot of pre-defined annotation. 
	All annotation start with @ followed by annotation name, 
	Some annotation we can use on class level, method level or property or variable level.

class Bike {
	void speed() {
		System.out.println("60m/hr");
	}
}
class Pulsar extends Bike {
	void color() {
		System.out.println("Black");
	}
	@Override
	void speed() {
		System.out.println("90m/hr");
	}
}
class Honda extends Bike {
	void color() {
		System.out.println("Red");
	}
	void color(String name) {
		System.out.println(name);
	}
}
class Tvs extends Bike {
	void color() {
		System.out.println("Blue");
	}
	@Override
	void speed() {
		super.speed();
		System.out.println("25m/hr");
	}
}
class OperationTest {
	public static void main(String args[]) {
	Honda hh  = new Honda();	hh.color();		hh.color("Black");	hh.speed();
	Pulsar pu = new Pulsar();	pu.color();		pu.speed();
	Tvs tv = new Tvs();		tv.color();		tv.speed();	
	}
}
	

	abstract, static and final keywords 

	
	abstract 

	1. abstract is a keyword we can use with method and class but not with variable. 
	2. abstract method :The method without body or without curly braces is known as 
	abstract method 

	syntax 

	abstract returnType methodName(parameterList);

	abstract void speed();

	3. if class contains one or more abstract method we have to declare the class as a abstract class. 

	syntax 

	abstract class className {

	}

	4. Which ever class extends abstract class that class must be provide the body for all abstract methods mandatory. That class can ignore only if that class itself is a abstract class. 

	5. abstract class we can't create the object. 

	6. abstract class can contains zero or 1 or all abstract methods. 

	7. abstract class can contains default constructor as well as we can write parameterized constructor. 

	final : final is a keyword we can use with variable, method and class. 

	1. final varible : To declare a constant value we use final keyword with variable. 

	final int A=10;
	
	2. final method : if the method is a final we can't override that method but we can 
	access that method. 

	3. final class : if the class is a final we can't extends that class. 

		
	1. static : static keyword we can use with variable and method but not with class 
	(if class inner class then we can use static keyword for inner class but not for outer class).

	
	class Outer {
		static int a;
		static void dis() {

		}
		static class Inner {

		}
	}

	2. static variable : We can access static variable with the help of class name as well as object 
	reference. 
	3. static method :We can access static method with the help of class name as well as object 
	reference. 

	
	
	interface :  interface is a type of reference data types. 
	interface is a 100% pure abstract class. 
	
	syntax 

	interface interfaceName {
		fields; 
		methods;
	}


	by default all fields or variable are public static and final. 
	by default all methods are public and abstract. 


	interface Abc {
		public static final int A=10;
		static final int B=20;
		final int C=30;
		int D=40;
		public abstract void dis1();
		public void dis2();	
		abstract void dis3();
		void dis4();
	}

	interface A {
		int X=10;
		void dis1();
	}

	interface B {
		int Y=20;
		void dis2();
	}
	interface C extends A,B{
		int Z=30;
		void dis3();
	}
	class Demo implements A,B {

	}

	

		
	Super 				Sub 

	class/interface			class

	public 				public 


	protected				public 
					protected 

	default(nothing)			public 
					protected 
					default 

	private 				can't override 

	





	
		
	interface B				interface C 


	dis1()					dis1()				

	
	


		class D implements B, C {

		}


interface A {
	int X=10;
	void dis1();
}
interface B {
	int Y=20;
	void dis2();
}
interface C extends A,B{
	int Z=30;
	void dis3();
}
class Demo implements A,B {
	public void dis1() {
		System.out.println("A interface method");
	}
	public void dis2() {
		System.out.println("B interface method");
	}
}
class OperationTest {
	public static void main(String args[]) {
	Demo obj = new Demo();
	obj.dis1();	obj.dis2();		
	}
}

	this, this(), super, super() : 

	package : package is a collection of classes and interfaces. 

	2 types 

	user-defined package 

				Education 

	School			College			pg 

	Attendance 		Attendance		Attendance




	syntax 


	package com;
	class Demo {
		public static void  main(String args[]) {

		}
	}



	pre-defined or built in package 
	

	
	Date : 

	util 		sql 



	












	Access Specifiers 

	4 types 

	public 
	protected 
	default (nothing)
	private 

	public : class, instance variable, static variable, non static method, static method, constructor 
	but not for local variable. 

	protected :instance variable, static variable, non static method, static method, constructor 
	but not for class as well as local variable. 

	default : All

	private : instance variable, static variable, non static method, static method, constructor 
	but not for class as well as local variable. 

	Scope : private : within a same class 

                                  default : within a same package 
	
	               protected : within a same package other package if it is a sub class. 
	
	              public : everywhere we can access (same package as well as other package).
	package com1				package com2 
						import com1.A;
	A					B
	public int a;
	protected int b;				A obj2 = new A();
	int c;					obj2.a
	private int d;				//obj2.b		
						//obj2.c
						//obj2.d
	void dis1() {

	}

	C					class D extends A
						a
	A obj1 = new A();				b
	obj1.a					//c
	obj1.b					//d
	obj1.c
	//obj.d



		built-in package 

		

	java						javax ---->root package 


		lang (language)				swing 						
	io(input output)					rmi 
	util (utility)					sql 
	awt (abstract window toolkit)				net 
	net (networking)					servlet 
	rmi (remote method invocation)				ejb (enterprise Java bean)
	sql (structure query language)				jms (Java messaging service)
	


	lang package 

	util 

	sql package 

	By default every java program import lang package. 
	By default every java program extends Object class. 

	Exception Handling : 

	Exception is a object, it will generate when unexpcected or abnormal condition 
	during the execution of a program. 

				Java 

	Compile 						Run 
	javac						java 

	Compile time error 					Run time error 

	syntax error 



				Run time error 

				
			Error 			Exception 

	Error and Exception both are pre-defined classes part of lang package. 
	Error is a type of error which generate at the run time which we can't handle it 
		JVM crash, Out of memory, Software or hardware issue. 

	Exception is a type of error which generate at the run time which we can handle it 
		divided by zero, array index out of bounds, number format. 

		Object 
					extends 
		Throwable 
					extends 
	Error 		Exception 
		
	checked exeption 				unchecked exception 

		
						RuntimeException 

IOException
SQLException 					ArrayIndexOutOfBoundsException 
FileNotFoundException 				NumberFormatException 
						ArithmeticException 

etc						etc

		

	5 keywords 

	try 
	catch 
	finally 
	throw
	throws 

	try catch block 

	syntax 

	try {

	}catch(Exception e) {

	}






		Employee : 

		id,name,salary ---->
		pk 

		CRUD (Create, Read, Update and Delete)


			JDBC : Java Database Connectivity :

	JDBC is a API(Application Programming interface) which contains set of classes 
	and interfaces which help to connect the database through Java Programs. 

	
	sql package 

	





		DAO : Data Access Object Layer 	
	
		ORM : Object Relation Mapping 

		1. Load the Driver : Driver is a pre-defined class provided by vendor (database) 
	which help to connect the database through Java programs. 

		types of driver
		type 1	remove from java 8 onwords , jdbc odbc bridge driver 
		type 2	jdbc native api driver 
		type 3	jdbc net protocol driver 
		type 4 	jdbc pure driver or thin driver 

		type 4 driver : oracle.jdbc.driver.OracleDriver 

		
		2. Establish the connection 
		
		DriverManager is a pre-defined class part of sql package. It provided 
		getConnection() static method. which takes three parameter 
		first -->url 
		second --->username
		third --->password 


		DriverManager.getConnection(url,username,password);

		return type of this method is Connection interface reference. 

	Connection con = DriverManager.getConnection(url,username,password);


		3. Create type of statements :

		Statement, PreparedStatement and CallableStatement all are interfaces
		which provide set of methods which help to do CRUD Operation on tables. 

		a. Statement 

		Statement stmt = con.createStatement();

			i. DML Operation 
				int result = stmt.executeUpdate("DML Query");
				
			ii. Select Query 		

















		










View -------------> Controller ---------------> Service ------------->Dao -------------------->Database 



							             Employee 
							              id,name,salary





			

			


	11-07-2019

			Collection Framework (Data Structure)

	Collection framework contains set of classes and interfaces which help to store 
	the collection of object or elements. Where the elements or objects may be 
	primitive types(wrapper classes references) as well as user-defined or pre-defined objects. 

	int a;

	int abc[];

	class Employee {
		int id;
		String name;
		float salary;
	}		
	Employee emp = new Employee();
	emp.id = 100;
	emp.name="Ravi";
	emp.salary = 12000;
			
	Employee employees[]=new Employee[100];

	Object obj[]=new Object[100];

				util package 

				Collection -----> interface 

		    extends 			extends 			doesn't extends 
	Set			List			Map -----> interfaces

	
	HashSet 			Stack 			HashMap 

	LinkedHashSet		ArrayList 			LinkedHashMap 

	TreeSet 			LinkedList 		TreeMap 

				Vector 			Hashtable 


	
		primitive data types 			wrapper classes 

		byte				Byte

		short				Short 

		int 				Integer 

		long 				Long 

		float				Float

		double 				Double 

		char				Character 

		boolean 				Boolean 

	


	
	



	

	
	
import java.util.*;
class Demo {
	public static void main(String args[]) {
	List ll = new ArrayList();
	ll.add(10);		// auto-boxing 
	ll.add("Raj");
	ll.add(10.10);
	ll.add(true);
	
			Object obj = ll.get(1);
			if(obj instanceof String) {
				String str = (String)obj;
				System.out.println("String value "+str);
			}
			if(obj instanceof Integer) {
				Integer obj1 = (Integer)obj;
				System.out.println("Integer value "+obj1);
			}
			/*Integer ii = (Integer)obj;
			int n = ii.intValue();	//converting objet to primitive 
			System.out.println(n);*/
	}
}

	  

	




		Testing :


		Testing is use to find the defects or errors or bugs. 

		2 types of testing 

		black box testing
			
				Input 				Output 

				a = 10
				b = 20 				30  
		white box testing



				Input ----->Process ----->Output 


		unit testing : unit means class, function, or method, modules. 

		jUnit : jUnit is small framework provided by vendor to do the Unit testing 
		for the Java programs. 
		






				

			JEE : Java Enterprise Edition 

			JEE is use to create the web application. 

			

			Client --- Server 

		https://www.google.com	----> URL 

		----------------->http/htts------------------------->
				Req 		

	Client 						Server 

				Res 
		<------------------http/https---------------------------
							HTML 
							CSS

		Hyper Text Markup Language : It is use to create the web page. 
		Page may be static or dynamic web page. 
		HTML 1, 2, 3, 4, 5 

		CSS : Cascadding Style Sheet: CSS is use to create the formatting style for the
		Web page. 
		CSS 1, 2, 3 

		JavaScript : JavaScript was interpreter object oriented scripting language. 

								Php 

								JEE
							Servlet /JSP / EJB

								Asp.net 

								Python 
								
								CGI 

								Node JS 

		Servlet /JSP /EJB 						etc 
	Servlet : Servlet is normal Java Program which help to create dynamic web page on 
	server side. 

	Server : 

			2 types 

			Web Server : Tomcate
		 			Web Container 
			Application Server 
				JBoss, WebLogic, WebSphere, Glashfish etc 
				Web Container and EJB Container 
				+ Extra Services 
				like resource management, thread management, 
				connectiong pooling, security etc. 

	Container : Container is part of server.  Container is also known as engine. Container is 
	responsible to execute servlet, jsp and ejb application. It is responsible to load the class, 
	create the object, call the life cycle methods of Servlet, JSP and EJB. 
	2 types 
	Web Container and EJB Container 
	



	Servlet ----> interface 

	GenericServlet ----->class 

	HttpServlet ------> class 
				Servlet life cycle methods 

				init 
				service 	doGet(), doPost(), doDelete(), doPut() 
				destroy 
				


	Client 

	http://localhost:9090/DemoWebApp/Demo

				Web Service :

		Giving the Service for Web Application when both the application 
		running using different technologies or Languages. 

						
				
	     Req(Http/Https)			Java(Req)

Client 			HDFC (JEE)	XML/JSON	HSBC Asp.net 

	    Res(Http/Https)			.net(Res)			

	XML : eXtensible Markup Language 
	JSON : JavaScript Object Notation 

	class Customer {
		int cutId;
		String name;
		setter / getter 
	}
	Customer cc  = new Customer();
	cc.setCustId(100);	cc.setName("Ravi");

	<Customer>
		<custId>100</custId>
		<Name>Ravi</Name>
	</Customer>	

	{cc:{"custId":100,"name":"Ravi"}};

		
	Types of Web Service 

	1. SOAP Web Service 

		SOAP : Simple Object Access Protocol 
			base upon SOA (Service Oriented Architecture)

				SB (Service Broker 		UDDI 	Registry 
							Universal 
							Description 
							Discovery 
							Integration 	


							WSDL File 
							Web Service Description 
							Language 

	SC Or SR						SP( Service Provider)
	Service Consumer 
	Service Requester 

							Asp.net 

	2. RestFull Web Service 

			





































		

		











	

	


		
	
	

















	

	
		     JavaBean 	JavaBean 		JavaBean 
	
View ------> Controller --------------> Service ------------->Dao --------------------->Database 
 	
HTML	RestFull 
CSS	WebService 
JavaScript 
TypeScript 

React JS 
Angular JS 


JAX_RS Front Controller jar file 

com.sun.jersey.spi.container.servlet.ServletContainer


https://jersey.github.io/



	









